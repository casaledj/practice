{"version":3,"sources":["components/RestaurantList.tsx","App.tsx","services/restaurantService.ts","index.tsx"],"names":["RestaurantList","_ref","restaurants","_jsxs","children","_jsx","map","restaurant","name","address","rating","distance","id","App","location","setLocation","useState","radius","setRadius","setRestaurants","type","placeholder","value","onChange","event","target","min","max","Number","onClick","handleSearch","async","radiusInMeters","axios","get","params","ll","categories","limit","v","headers","Accept","Authorization","process","data","results","place","fsq_id","error","console","fetchRestaurants","then","handleUseMyLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","Error","concat","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"wLA0BeA,MAlBuCC,IAAsB,IAArB,YAAEC,GAAaD,EAClE,OACIE,eAAA,OAAAC,SAAA,CACIC,cAAA,MAAAD,SAAI,sBACJC,cAAA,MAAAD,SACKF,EAAYI,IAAKC,GACdJ,eAAA,MAAAC,SAAA,CACIC,cAAA,MAAAD,SAAKG,EAAWC,OAChBH,cAAA,KAAAD,SAAIG,EAAWE,UACfN,eAAA,KAAAC,SAAA,CAAG,WAASG,EAAWG,UACvBP,eAAA,KAAAC,SAAA,CAAG,aAAWG,EAAWI,SAAS,cAJ7BJ,EAAWK,W,iBCyCzBC,MAlDOA,KAClB,MAAOC,EAAUC,GAAeC,mBAAS,KAClCC,EAAQC,GAAaF,mBAAS,IAC9Bd,EAAaiB,GAAkBH,mBAAuB,IAuB7D,OACIb,eAAA,OAAAC,SAAA,CACIC,cAAA,MAAAD,SAAI,sBACJC,cAAA,SACIe,KAAK,OACLC,YAAY,iBACZC,MAAOR,EACPS,SA5BkBC,IAC1BT,EAAYS,EAAMC,OAAOH,UA6BrBjB,cAAA,SACIe,KAAK,QACLM,IAAI,IACJC,IAAI,KACJL,MAAOL,EACPM,SA/BgBC,IACxBN,EAAUU,OAAOJ,EAAMC,OAAOH,WAgC1BnB,eAAA,QAAAC,SAAA,CAAOa,EAAO,YACdZ,cAAA,UAAQwB,QA9BKC,KCZOC,OAAOjB,EAAkBG,KACrD,IACI,MAAMe,EAA0B,QAATf,EAevB,aAduBgB,IAAMC,IANV,8CAMkC,CACjDC,OAAQ,CACJC,GAAItB,EACJG,OAAQe,EACRK,WAAY,2BACZC,MAAO,GACPC,EAAG,YAEPC,QAAS,CACLC,OAAQ,mBACRC,cAfWC,uDAmBHC,KAAKC,QAAQvC,IAAKwC,IAAU,CACxClC,GAAIkC,EAAMC,OACVvC,KAAMsC,EAAMtC,KACZC,QAASqC,EAAMhC,SAASL,QACxBC,OAAQ,EACRC,SAAUmC,EAAMnC,SAAW,UAEnC,CAAE,MAAOqC,GAEL,MADAC,QAAQD,MAAM,8BAA+BA,GACvCA,CACV,GDdIE,CAAiBpC,EAAUG,GAAQkC,KAAKP,IACpCzB,EAAeyB,MA4BexC,SAAC,WAC/BC,cAAA,UAAQwB,QAzBYuB,KCarB,IAAIC,QAAQ,CAACC,EAASC,KACrBC,UAAUC,YACVD,UAAUC,YAAYC,mBACjBC,IACGL,EAAQ,CACJM,SAAUD,EAASE,OAAOD,SAC1BE,UAAWH,EAASE,OAAOC,aAGlCd,IACGO,EAAOP,KAIfO,EAAO,IAAIQ,MAAM,oDD1BHZ,KAAKU,IACnB9C,EAAY,GAADiD,OAAIH,EAAOD,SAAQ,KAAAI,OAAIH,EAAOC,eAuBJ1D,SAAC,oBACtCC,cAACL,EAAc,CAACE,YAAaA,QE9CzC+D,IAASC,OACP7D,cAAC8D,IAAMC,WAAU,CAAAhE,SACfC,cAACQ,EAAG,MAENwD,SAASC,eAAe,Q","file":"static/js/main.2ffee5c5.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Restaurant } from '../types';\n\ninterface RestaurantListProps {\n    restaurants: Restaurant[];\n}\n\nconst RestaurantList: React.FC<RestaurantListProps> = ({ restaurants }) => {\n    return (\n        <div>\n            <h2>Local Restaurants</h2>\n            <ul>\n                {restaurants.map((restaurant) => (\n                    <li key={restaurant.id}>\n                        <h3>{restaurant.name}</h3>\n                        <p>{restaurant.address}</p>\n                        <p>Rating: {restaurant.rating}</p>\n                        <p>Distance: {restaurant.distance} miles</p>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default RestaurantList;","import React, { useState, useEffect } from 'react';\nimport RestaurantList from './components/RestaurantList';\nimport { fetchRestaurants, getUserLocation } from './services/restaurantService';\nimport { Restaurant } from './types';\n\nconst App: React.FC = () => {\n    const [location, setLocation] = useState('');\n    const [radius, setRadius] = useState(5); // default radius in miles\n    const [restaurants, setRestaurants] = useState<Restaurant[]>([]);\n\n    const handleLocationChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setLocation(event.target.value);\n    };\n\n    const handleRadiusChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setRadius(Number(event.target.value));\n    };\n\n    const handleSearch = () => {\n        fetchRestaurants(location, radius).then(data => {\n            setRestaurants(data);\n        });\n    };\n\n    const handleUseMyLocation = () => {\n        getUserLocation().then(coords => {\n            setLocation(`${coords.latitude},${coords.longitude}`);\n        });\n    };\n        \n\n    return (\n        <div>\n            <h1>Local Restaurants</h1>\n            <input\n                type=\"text\"\n                placeholder=\"Enter location\"\n                value={location}\n                onChange={handleLocationChange}\n            />\n            <input\n                type=\"range\"\n                min=\"1\"\n                max=\"30\"\n                value={radius}\n                onChange={handleRadiusChange}\n            />\n            <span>{radius} miles</span>\n            <button onClick={handleSearch}>Search</button>\n            <button onClick={handleUseMyLocation}>Use My Location</button>\n            <RestaurantList restaurants={restaurants} />\n        </div>\n    );\n};\n\nexport default App;","import axios from 'axios';\nimport { Restaurant } from '../types';\n\nconst FOURSQUARE_API_URL = 'https://api.foursquare.com/v3/places/search';\nconst FOURSQUARE_API_KEY = process.env.REACT_APP_FOURSQUARE_API_KEY;\n\nexport const fetchRestaurants = async (location: string, radius: number): Promise<Restaurant[]> => {\n    try {\n        const radiusInMeters = radius * 1609.34; // Convert miles to meters\n        const response = await axios.get(FOURSQUARE_API_URL, {\n            params: {\n                ll: location,\n                radius: radiusInMeters,\n                categories: '4d4b7105d754a06374d81259', // Category ID for restaurants\n                limit: 50, // Limit the number of results\n                v: '20250903' // Foursquare API versioning parameter (YYYYMMDD)\n            },\n            headers: {\n                Accept: 'application/json',\n                Authorization: FOURSQUARE_API_KEY,\n            },\n        });\n\n        return response.data.results.map((place: any) => ({\n            id: place.fsq_id,\n            name: place.name,\n            address: place.location.address,\n            rating: 0, // Foursquare Places API search results do not directly provide a rating\n            distance: place.distance / 1609.34, // Convert meters back to miles\n        }));\n    } catch (error) {\n        console.error('Error fetching restaurants:', error);\n        throw error;\n    }\n};\n\nexport const getUserLocation = (): Promise<{latitude: number, longitude: number}> => {\n    return new Promise((resolve, reject) => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                (position) => {\n                    resolve({\n                        latitude: position.coords.latitude,\n                        longitude: position.coords.longitude,\n                    });\n                },\n                (error) => {\n                    reject(error);\n                }\n            );\n        } else {\n            reject(new Error('Geolocation is not supported by this browser.'));\n        }\n    });\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}